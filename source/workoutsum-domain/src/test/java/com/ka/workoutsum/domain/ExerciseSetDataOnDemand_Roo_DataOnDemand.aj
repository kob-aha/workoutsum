// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ka.workoutsum.domain;

import com.ka.workoutsum.domain.ExerciseLogRec;
import com.ka.workoutsum.domain.ExerciseLogRecDataOnDemand;
import com.ka.workoutsum.domain.ExerciseSet;
import com.ka.workoutsum.domain.ExerciseSetDataOnDemand;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ExerciseSetDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ExerciseSetDataOnDemand: @Component;
    
    private Random ExerciseSetDataOnDemand.rnd = new SecureRandom();
    
    private List<ExerciseSet> ExerciseSetDataOnDemand.data;
    
    @Autowired
    private ExerciseLogRecDataOnDemand ExerciseSetDataOnDemand.exerciseLogRecDataOnDemand;
    
    public ExerciseSet ExerciseSetDataOnDemand.getNewTransientExerciseSet(int index) {
        ExerciseSet obj = new ExerciseSet();
        setExerciseLogRec(obj, index);
        setPlatesNum(obj, index);
        setRemarks(obj, index);
        setRepsNum(obj, index);
        setSetsNum(obj, index);
        setTest(obj, index);
        setWeight(obj, index);
        return obj;
    }
    
    public void ExerciseSetDataOnDemand.setExerciseLogRec(ExerciseSet obj, int index) {
        ExerciseLogRec exerciseLogRec = exerciseLogRecDataOnDemand.getRandomExerciseLogRec();
        obj.setExerciseLogRec(exerciseLogRec);
    }
    
    public void ExerciseSetDataOnDemand.setPlatesNum(ExerciseSet obj, int index) {
        Integer platesNum = new Integer(index);
        obj.setPlatesNum(platesNum);
    }
    
    public void ExerciseSetDataOnDemand.setRemarks(ExerciseSet obj, int index) {
        String remarks = "remarks_" + index;
        obj.setRemarks(remarks);
    }
    
    public void ExerciseSetDataOnDemand.setRepsNum(ExerciseSet obj, int index) {
        Integer repsNum = new Integer(index);
        obj.setRepsNum(repsNum);
    }
    
    public void ExerciseSetDataOnDemand.setSetsNum(ExerciseSet obj, int index) {
        Integer setsNum = new Integer(index);
        if (setsNum > 99) {
            setsNum = 99;
        }
        obj.setSetsNum(setsNum);
    }
    
    public void ExerciseSetDataOnDemand.setTest(ExerciseSet obj, int index) {
        Integer test = new Integer(index);
        if (test > 99) {
            test = 99;
        }
        obj.setTest(test);
    }
    
    public void ExerciseSetDataOnDemand.setWeight(ExerciseSet obj, int index) {
        BigDecimal weight = BigDecimal.valueOf(index);
        obj.setWeight(weight);
    }
    
    public ExerciseSet ExerciseSetDataOnDemand.getSpecificExerciseSet(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ExerciseSet obj = data.get(index);
        Long id = obj.getId();
        return ExerciseSet.findExerciseSet(id);
    }
    
    public ExerciseSet ExerciseSetDataOnDemand.getRandomExerciseSet() {
        init();
        ExerciseSet obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return ExerciseSet.findExerciseSet(id);
    }
    
    public boolean ExerciseSetDataOnDemand.modifyExerciseSet(ExerciseSet obj) {
        return false;
    }
    
    public void ExerciseSetDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ExerciseSet.findExerciseSetEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ExerciseSet' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ExerciseSet>();
        for (int i = 0; i < 10; i++) {
            ExerciseSet obj = getNewTransientExerciseSet(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
